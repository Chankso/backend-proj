/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ValidationErrors } from "./utils/form";
import { RecursiveSkeleton } from "./services/file-system-services";
import { JSX } from "@stencil/core";
import { FileEntry } from "./models/upload.models";
export namespace Components {
    interface AdminTable {
    }
    interface AdminUpload {
    }
    interface AppAuth {
    }
    interface AppErrors {
        "errors": ValidationErrors | null;
        "templates": { [key: string]: string };
    }
    interface AppHeader {
    }
    interface AppHero {
    }
    interface AppHome {
    }
    interface AppLoggedin {
    }
    interface AppLogin {
    }
    interface AppRegister {
        "embedded": boolean;
    }
    interface AppRoot {
    }
    interface AppSection {
        "background": boolean;
        "elevate": boolean;
        "noMargin": boolean;
    }
    interface CompSearchbar {
    }
    interface CompTree {
        "fileDetailFactory": (child: FileEntry) => JSX.Element;
        "folderDetailFactory": (child: RecursiveSkeleton) => JSX.Element;
        "tree": RecursiveSkeleton;
    }
    interface CompTreeNode {
        "fileDetailFactory": (child: FileEntry) => JSX.Element;
        "folderDetailFactory": (child: RecursiveSkeleton) => JSX.Element;
        "isOpen": boolean;
        "subTree": RecursiveSkeleton;
    }
    interface DropdownBtn {
    }
    interface DropdownShell {
    }
    interface ImageView {
        "hideArrows": boolean;
        "hideExit": boolean;
        "imageBlob": Blob;
    }
    interface ItemboxContent {
        "itemIcon": string;
        "itemName": string;
        "showDots": boolean;
    }
    interface ItemboxShell {
    }
}
declare global {
    interface HTMLAdminTableElement extends Components.AdminTable, HTMLStencilElement {
    }
    var HTMLAdminTableElement: {
        prototype: HTMLAdminTableElement;
        new (): HTMLAdminTableElement;
    };
    interface HTMLAdminUploadElement extends Components.AdminUpload, HTMLStencilElement {
    }
    var HTMLAdminUploadElement: {
        prototype: HTMLAdminUploadElement;
        new (): HTMLAdminUploadElement;
    };
    interface HTMLAppAuthElement extends Components.AppAuth, HTMLStencilElement {
    }
    var HTMLAppAuthElement: {
        prototype: HTMLAppAuthElement;
        new (): HTMLAppAuthElement;
    };
    interface HTMLAppErrorsElement extends Components.AppErrors, HTMLStencilElement {
    }
    var HTMLAppErrorsElement: {
        prototype: HTMLAppErrorsElement;
        new (): HTMLAppErrorsElement;
    };
    interface HTMLAppHeaderElement extends Components.AppHeader, HTMLStencilElement {
    }
    var HTMLAppHeaderElement: {
        prototype: HTMLAppHeaderElement;
        new (): HTMLAppHeaderElement;
    };
    interface HTMLAppHeroElement extends Components.AppHero, HTMLStencilElement {
    }
    var HTMLAppHeroElement: {
        prototype: HTMLAppHeroElement;
        new (): HTMLAppHeroElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppLoggedinElement extends Components.AppLoggedin, HTMLStencilElement {
    }
    var HTMLAppLoggedinElement: {
        prototype: HTMLAppLoggedinElement;
        new (): HTMLAppLoggedinElement;
    };
    interface HTMLAppLoginElement extends Components.AppLogin, HTMLStencilElement {
    }
    var HTMLAppLoginElement: {
        prototype: HTMLAppLoginElement;
        new (): HTMLAppLoginElement;
    };
    interface HTMLAppRegisterElement extends Components.AppRegister, HTMLStencilElement {
    }
    var HTMLAppRegisterElement: {
        prototype: HTMLAppRegisterElement;
        new (): HTMLAppRegisterElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppSectionElement extends Components.AppSection, HTMLStencilElement {
    }
    var HTMLAppSectionElement: {
        prototype: HTMLAppSectionElement;
        new (): HTMLAppSectionElement;
    };
    interface HTMLCompSearchbarElement extends Components.CompSearchbar, HTMLStencilElement {
    }
    var HTMLCompSearchbarElement: {
        prototype: HTMLCompSearchbarElement;
        new (): HTMLCompSearchbarElement;
    };
    interface HTMLCompTreeElement extends Components.CompTree, HTMLStencilElement {
    }
    var HTMLCompTreeElement: {
        prototype: HTMLCompTreeElement;
        new (): HTMLCompTreeElement;
    };
    interface HTMLCompTreeNodeElement extends Components.CompTreeNode, HTMLStencilElement {
    }
    var HTMLCompTreeNodeElement: {
        prototype: HTMLCompTreeNodeElement;
        new (): HTMLCompTreeNodeElement;
    };
    interface HTMLDropdownBtnElement extends Components.DropdownBtn, HTMLStencilElement {
    }
    var HTMLDropdownBtnElement: {
        prototype: HTMLDropdownBtnElement;
        new (): HTMLDropdownBtnElement;
    };
    interface HTMLDropdownShellElement extends Components.DropdownShell, HTMLStencilElement {
    }
    var HTMLDropdownShellElement: {
        prototype: HTMLDropdownShellElement;
        new (): HTMLDropdownShellElement;
    };
    interface HTMLImageViewElement extends Components.ImageView, HTMLStencilElement {
    }
    var HTMLImageViewElement: {
        prototype: HTMLImageViewElement;
        new (): HTMLImageViewElement;
    };
    interface HTMLItemboxContentElement extends Components.ItemboxContent, HTMLStencilElement {
    }
    var HTMLItemboxContentElement: {
        prototype: HTMLItemboxContentElement;
        new (): HTMLItemboxContentElement;
    };
    interface HTMLItemboxShellElement extends Components.ItemboxShell, HTMLStencilElement {
    }
    var HTMLItemboxShellElement: {
        prototype: HTMLItemboxShellElement;
        new (): HTMLItemboxShellElement;
    };
    interface HTMLElementTagNameMap {
        "admin-table": HTMLAdminTableElement;
        "admin-upload": HTMLAdminUploadElement;
        "app-auth": HTMLAppAuthElement;
        "app-errors": HTMLAppErrorsElement;
        "app-header": HTMLAppHeaderElement;
        "app-hero": HTMLAppHeroElement;
        "app-home": HTMLAppHomeElement;
        "app-loggedin": HTMLAppLoggedinElement;
        "app-login": HTMLAppLoginElement;
        "app-register": HTMLAppRegisterElement;
        "app-root": HTMLAppRootElement;
        "app-section": HTMLAppSectionElement;
        "comp-searchbar": HTMLCompSearchbarElement;
        "comp-tree": HTMLCompTreeElement;
        "comp-tree-node": HTMLCompTreeNodeElement;
        "dropdown-btn": HTMLDropdownBtnElement;
        "dropdown-shell": HTMLDropdownShellElement;
        "image-view": HTMLImageViewElement;
        "itembox-content": HTMLItemboxContentElement;
        "itembox-shell": HTMLItemboxShellElement;
    }
}
declare namespace LocalJSX {
    interface AdminTable {
    }
    interface AdminUpload {
    }
    interface AppAuth {
    }
    interface AppErrors {
        "errors"?: ValidationErrors | null;
        "templates"?: { [key: string]: string };
    }
    interface AppHeader {
    }
    interface AppHero {
    }
    interface AppHome {
    }
    interface AppLoggedin {
    }
    interface AppLogin {
    }
    interface AppRegister {
        "embedded"?: boolean;
        "onRegister"?: (event: CustomEvent<any>) => void;
    }
    interface AppRoot {
    }
    interface AppSection {
        "background"?: boolean;
        "elevate"?: boolean;
        "noMargin"?: boolean;
    }
    interface CompSearchbar {
        "onSearch"?: (event: CustomEvent<string>) => void;
    }
    interface CompTree {
        "fileDetailFactory"?: (child: FileEntry) => JSX.Element;
        "folderDetailFactory"?: (child: RecursiveSkeleton) => JSX.Element;
        "tree"?: RecursiveSkeleton;
    }
    interface CompTreeNode {
        "fileDetailFactory"?: (child: FileEntry) => JSX.Element;
        "folderDetailFactory"?: (child: RecursiveSkeleton) => JSX.Element;
        "isOpen"?: boolean;
        "subTree"?: RecursiveSkeleton;
    }
    interface DropdownBtn {
    }
    interface DropdownShell {
    }
    interface ImageView {
        "hideArrows"?: boolean;
        "hideExit"?: boolean;
        "imageBlob"?: Blob;
        "onExitClick"?: (event: CustomEvent<any>) => void;
        "onLeftArrowClick"?: (event: CustomEvent<any>) => void;
        "onRightArrowClick"?: (event: CustomEvent<any>) => void;
    }
    interface ItemboxContent {
        "itemIcon"?: string;
        "itemName"?: string;
        "onItemClick"?: (event: CustomEvent<any>) => void;
        "showDots"?: boolean;
    }
    interface ItemboxShell {
    }
    interface IntrinsicElements {
        "admin-table": AdminTable;
        "admin-upload": AdminUpload;
        "app-auth": AppAuth;
        "app-errors": AppErrors;
        "app-header": AppHeader;
        "app-hero": AppHero;
        "app-home": AppHome;
        "app-loggedin": AppLoggedin;
        "app-login": AppLogin;
        "app-register": AppRegister;
        "app-root": AppRoot;
        "app-section": AppSection;
        "comp-searchbar": CompSearchbar;
        "comp-tree": CompTree;
        "comp-tree-node": CompTreeNode;
        "dropdown-btn": DropdownBtn;
        "dropdown-shell": DropdownShell;
        "image-view": ImageView;
        "itembox-content": ItemboxContent;
        "itembox-shell": ItemboxShell;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "admin-table": LocalJSX.AdminTable & JSXBase.HTMLAttributes<HTMLAdminTableElement>;
            "admin-upload": LocalJSX.AdminUpload & JSXBase.HTMLAttributes<HTMLAdminUploadElement>;
            "app-auth": LocalJSX.AppAuth & JSXBase.HTMLAttributes<HTMLAppAuthElement>;
            "app-errors": LocalJSX.AppErrors & JSXBase.HTMLAttributes<HTMLAppErrorsElement>;
            "app-header": LocalJSX.AppHeader & JSXBase.HTMLAttributes<HTMLAppHeaderElement>;
            "app-hero": LocalJSX.AppHero & JSXBase.HTMLAttributes<HTMLAppHeroElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-loggedin": LocalJSX.AppLoggedin & JSXBase.HTMLAttributes<HTMLAppLoggedinElement>;
            "app-login": LocalJSX.AppLogin & JSXBase.HTMLAttributes<HTMLAppLoginElement>;
            "app-register": LocalJSX.AppRegister & JSXBase.HTMLAttributes<HTMLAppRegisterElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-section": LocalJSX.AppSection & JSXBase.HTMLAttributes<HTMLAppSectionElement>;
            "comp-searchbar": LocalJSX.CompSearchbar & JSXBase.HTMLAttributes<HTMLCompSearchbarElement>;
            "comp-tree": LocalJSX.CompTree & JSXBase.HTMLAttributes<HTMLCompTreeElement>;
            "comp-tree-node": LocalJSX.CompTreeNode & JSXBase.HTMLAttributes<HTMLCompTreeNodeElement>;
            "dropdown-btn": LocalJSX.DropdownBtn & JSXBase.HTMLAttributes<HTMLDropdownBtnElement>;
            "dropdown-shell": LocalJSX.DropdownShell & JSXBase.HTMLAttributes<HTMLDropdownShellElement>;
            "image-view": LocalJSX.ImageView & JSXBase.HTMLAttributes<HTMLImageViewElement>;
            "itembox-content": LocalJSX.ItemboxContent & JSXBase.HTMLAttributes<HTMLItemboxContentElement>;
            "itembox-shell": LocalJSX.ItemboxShell & JSXBase.HTMLAttributes<HTMLItemboxShellElement>;
        }
    }
}
